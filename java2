import java.util.*;

public class StockTradingPlatform {

    static class Stock {
        String symbol;
        String name;
        double price;

        Stock(String symbol, String name, double price) {
            this.symbol = symbol;
            this.name = name;
            this.price = price;
        }
    }

    
    static class PortfolioEntry {
        Stock stock;
        int quantity;
        double totalInvested;

        PortfolioEntry(Stock stock, int quantity, double invested) {
            this.stock = stock;
            this.quantity = quantity;
            this.totalInvested = invested;
        }

        double getAveragePrice() {
            return totalInvested / quantity;
        }

        double getCurrentValue() {
            return stock.price * quantity;
        }
    }

    static class User {
        String name;
        HashMap<String, PortfolioEntry> portfolio = new HashMap<>();

        User(String name) {
            this.name = name;
        }

        void buyStock(Stock stock, int quantity) {
            double cost = stock.price * quantity;
            PortfolioEntry entry = portfolio.get(stock.symbol);
            if (entry != null) {
                entry.quantity += quantity;
                entry.totalInvested += cost;
            } else {
                portfolio.put(stock.symbol, new PortfolioEntry(stock, quantity, cost));
            }
            System.out.println("Bought " + quantity + " shares of " + stock.symbol + " for ₹" + cost);
        }

        void sellStock(Stock stock, int quantity) {
            PortfolioEntry entry = portfolio.get(stock.symbol);
            if (entry == null || entry.quantity < quantity) {
                System.out.println("Not enough shares to sell.");
                return;
            }
            entry.quantity -= quantity;
            double revenue = stock.price * quantity;
            entry.totalInvested -= (entry.getAveragePrice() * quantity);
            if (entry.quantity == 0) {
                portfolio.remove(stock.symbol);
            }
            System.out.println("Sold " + quantity + " shares of " + stock.symbol + " for ₹" + revenue);
        }

        void showPortfolio() {
            if (portfolio.isEmpty()) {
                System.out.println("Portfolio is empty.");
                return;
            }
            System.out.println("\n===== Portfolio Summary =====");
            double totalValue = 0;
            for (PortfolioEntry entry : portfolio.values()) {
                double currentValue = entry.getCurrentValue();
                totalValue += currentValue;
                System.out.printf("Stock: %s | Quantity: %d | Avg. Price: ₹%.2f | Current Price: ₹%.2f | Value: ₹%.2f\n",
                        entry.stock.symbol, entry.quantity, entry.getAveragePrice(),
                        entry.stock.price, currentValue);
            }
            System.out.printf("Total Portfolio Value: ₹%.2f\n", totalValue);
        }
    }

    // Preloaded market data
    static ArrayList<Stock> marketStocks = new ArrayList<>();

    static void loadMarketData() {
        marketStocks.add(new Stock("INFY", "Infosys", 1450.0));
        marketStocks.add(new Stock("TCS", "Tata Consultancy Services", 3550.0));
        marketStocks.add(new Stock("RELI", "Reliance Industries", 2500.0));
        marketStocks.add(new Stock("HDFC", "HDFC Bank", 1600.0));
    }

    static void showMarketData() {
        System.out.println("\n===== Market Stocks =====");
        for (Stock stock : marketStocks) {
            System.out.printf("Symbol: %-5s | Name: %-30s | Price: ₹%.2f\n", stock.symbol, stock.name, stock.price);
        }
    }

    static Stock findStockBySymbol(String symbol) {
        for (Stock stock : marketStocks) {
            if (stock.symbol.equalsIgnoreCase(symbol)) return stock;
        }
        return null;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        loadMarketData();

        System.out.print("Enter your name to start trading: ");
        String userName = sc.nextLine();
        User user = new User(userName);

        int choice;
        do {
            System.out.println("\n===== Stock Trading Menu =====");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            choice = sc.nextInt();
            sc.nextLine(); 

            switch (choice) {
                case 1:
                    showMarketData();
                    break;
                case 2:
                    showMarketData();
                    System.out.print("Enter stock symbol to buy: ");
                    String buySymbol = sc.nextLine();
                    Stock buyStock = findStockBySymbol(buySymbol);
                    if (buyStock == null) {
                        System.out.println("Invalid stock symbol.");
                        break;
                    }
                    System.out.print("Enter quantity to buy: ");
                    int buyQty = sc.nextInt();
                    sc.nextLine();
                    user.buyStock(buyStock, buyQty);
                    break;
                case 3:
                    user.showPortfolio();
                    System.out.print("Enter stock symbol to sell: ");
                    String sellSymbol = sc.nextLine();
                    Stock sellStock = findStockBySymbol(sellSymbol);
                    if (sellStock == null) {
                        System.out.println("Invalid stock symbol.");
                        break;
                    }
                    System.out.print("Enter quantity to sell: ");
                    int sellQty = sc.nextInt();
                    sc.nextLine();
                    user.sellStock(sellStock, sellQty);
                    break;
                case 4:
                    user.showPortfolio();
                    break;
                case 5:
                    System.out.println("Exiting... Thank you for trading!");
                    break;
                default:
                    System.out.println("Invalid option.");
            }

        } while (choice != 5);

        sc.close();
    }
}
